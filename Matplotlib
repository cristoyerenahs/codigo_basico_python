import pandas as pd                   # IMPORTAMOS BIBLIOTECAS CON RESPECTIVA ABREAVIATURA
import numpy as np
import bokeh as bk
import matplotlib.pyplot as plt
import seaborn as sns
import statsmodels as stata

N_points = 1000000
n_bins = 20

# Generate a normal distribution, center at x=0 and y=5
x = DB['Variable_numerica']

fig, axs = plt.subplots(1, 2, sharey=True, tight_layout=True)

# We can set the number of bins with the `bins` kwarg
axs[0].hist(x, bins=n_bins)

#####################################################################
x = DB['Variable_numérica']
y = DB['Variable_numérica']
plt.scatter(x,y)
plt.show()
###################################################################


#Data
mu = Promedio
sigma = Desviación standart
x = DB

num_bins = 50

fig, ax = plt.subplots()

#Histograma
n, bins, patches = ax.hist(x, num_bins, density=1)
#Ajuste
y = ((1 / (np.sqrt(2 * np.pi) * sigma)) *
     np.exp(-0.5 * (1 / sigma * (bins - mu))**2))
ax.plot(bins, y, '--')
ax.set_xlabel('Smarts')
ax.set_ylabel('Probability density')
ax.set_title(r'Histogram of IQ: $\mu=100$, $\sigma=15$')


fig.tight_layout()
plt.show()

##############################################################3

# Pie chart, where the slices will be ordered and plotted counter-clockwise:
labels = 'Etiqueta_1', 'Etiqueta_2', 'Etiqueta_3', 'Etiqueta_4'
sizes = [Valor_1, Valor_2, Valor_3, Valor_4]
explode = (0, 0.1, 0, 0.2)  

fig1, ax1 = plt.subplots()
ax1.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%',
        shadow=True, startangle=90)
ax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.

plt.show()
################################################################################

# EJEMPLO DE AGAROSA

fig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect="equal"))

Gel  =   ["0.8 g Agarosa",
          "50 g Água",
          "20 ng  Marcador",
          "90 ng DNA"]

data = [float(x.split()[0]) for x in Gel]
Ingredientes = [x.split()[-1] for x in Gel]


def func(pct, allvals):
    absolute = int(pct/100.*np.sum(allvals))
    return "{:.1f}%\n({:d} g)".format(pct, absolute)


wedges, texts, autotexts = ax.pie(data, autopct=lambda pct: func(pct, data),
                                  textprops=dict(color="w"))

ax.legend(wedges, Ingredientes,
          title="Ingredientes",
          loc="center left",
          bbox_to_anchor=(1, 0, 0.5, 1))

plt.setp(autotexts, size=8, weight="bold")

ax.set_title("Gel de Agarosa: Electroforesis")

plt.show()
#########################################################################

df = DB
 
df['Variable_categorica']=pd.Categorical(df['Variable_categorica'])
df['Variable_categorica'].cat.codes
 
#Scatter
plt.scatter(df['Variable_categorica'], df['Variable_categorica2_y'], s=62, c=df['Variable_categorica'].cat.codes, cmap="gist_rainbow", alpha=10, linewidth=0)

